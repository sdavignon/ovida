name: Deploy Ovida Web (Alternative Method)

on:
  # This workflow is disabled by default - only run manually
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      NODE_VERSION: '20'
      WEB_DIR: apps/web

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Use Node ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Set up pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8.15.6

      - name: Install dependencies (root)
        run: pnpm install --frozen-lockfile

      - name: Build @ovida/web
        run: pnpm --filter @ovida/web build

      - name: Verify build output
        run: |
          echo "Checking build output..."
          ls -la ${{ env.WEB_DIR }}/out/
          echo "File count: $(find ${{ env.WEB_DIR }}/out -type f | wc -l)"

      - name: Deploy to server via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          password: ${{ secrets.SSH_PASSWORD }}
          port: ${{ secrets.SSH_PORT || '22' }}
          script: |
            # Create backup of current deployment
            if [ -d "${{ vars.REMOTE_PATH }}" ]; then
              mv "${{ vars.REMOTE_PATH }}" "${{ vars.REMOTE_PATH }}.backup.$(date +%Y%m%d_%H%M%S)"
            fi
            # Create target directory
            mkdir -p "${{ vars.REMOTE_PATH }}"

      - name: Upload files via SCP
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          password: ${{ secrets.SSH_PASSWORD }}
          port: ${{ secrets.SSH_PORT || '22' }}
          source: "${{ env.WEB_DIR }}/out/*"
          target: ${{ vars.REMOTE_PATH }}
          strip_components: 3

      - name: Set proper permissions
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          password: ${{ secrets.SSH_PASSWORD }}
          port: ${{ secrets.SSH_PORT || '22' }}
          script: |
            # Set proper permissions for web files
            find "${{ vars.REMOTE_PATH }}" -type f -exec chmod 644 {} \;
            find "${{ vars.REMOTE_PATH }}" -type d -exec chmod 755 {} \;
            echo "Deployment completed successfully!"
            echo "Files deployed to: ${{ vars.REMOTE_PATH }}"
            ls -la "${{ vars.REMOTE_PATH }}"